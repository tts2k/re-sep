// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/auth_store.go
//
// Generated by this command:
//
//	mockgen -source=internal/store/auth_store.go -destination=internal/store/auth_store_mock.go -package store
//

// Package store is a generated GoMock package.
package store

import (
	context "context"
	proto "re-sep-user/internal/proto"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthStore is a mock of AuthStore interface.
type MockAuthStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStoreMockRecorder
}

// MockAuthStoreMockRecorder is the mock recorder for MockAuthStore.
type MockAuthStoreMockRecorder struct {
	mock *MockAuthStore
}

// NewMockAuthStore creates a new mock instance.
func NewMockAuthStore(ctrl *gomock.Controller) *MockAuthStore {
	mock := &MockAuthStore{ctrl: ctrl}
	mock.recorder = &MockAuthStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStore) EXPECT() *MockAuthStoreMockRecorder {
	return m.recorder
}

// CleanTokens mocks base method.
func (m *MockAuthStore) CleanTokens(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanTokens", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanTokens indicates an expected call of CleanTokens.
func (mr *MockAuthStoreMockRecorder) CleanTokens(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanTokens", reflect.TypeOf((*MockAuthStore)(nil).CleanTokens), ctx)
}

// DeleteToken mocks base method.
func (m *MockAuthStore) DeleteToken(ctx context.Context, state string) (*proto.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, state)
	ret0, _ := ret[0].(*proto.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockAuthStoreMockRecorder) DeleteToken(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockAuthStore)(nil).DeleteToken), ctx, state)
}

// GetTokenByState mocks base method.
func (m *MockAuthStore) GetTokenByState(ctx context.Context, state string) (*proto.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByState", ctx, state)
	ret0, _ := ret[0].(*proto.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByState indicates an expected call of GetTokenByState.
func (mr *MockAuthStoreMockRecorder) GetTokenByState(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByState", reflect.TypeOf((*MockAuthStore)(nil).GetTokenByState), ctx, state)
}

// GetUserByUniqueID mocks base method.
func (m *MockAuthStore) GetUserByUniqueID(ctx context.Context, id string) (*proto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUniqueID", ctx, id)
	ret0, _ := ret[0].(*proto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUniqueID indicates an expected call of GetUserByUniqueID.
func (mr *MockAuthStoreMockRecorder) GetUserByUniqueID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUniqueID", reflect.TypeOf((*MockAuthStore)(nil).GetUserByUniqueID), ctx, id)
}

// GetUserConfig mocks base method.
func (m *MockAuthStore) GetUserConfig(ctx context.Context, sub string) (*proto.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConfig", ctx, sub)
	ret0, _ := ret[0].(*proto.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConfig indicates an expected call of GetUserConfig.
func (mr *MockAuthStoreMockRecorder) GetUserConfig(ctx, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConfig", reflect.TypeOf((*MockAuthStore)(nil).GetUserConfig), ctx, sub)
}

// Health mocks base method.
func (m *MockAuthStore) Health() map[string]map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(map[string]map[string]string)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockAuthStoreMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockAuthStore)(nil).Health))
}

// InsertToken mocks base method.
func (m *MockAuthStore) InsertToken(ctx context.Context, state, userID string, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToken", ctx, state, userID, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertToken indicates an expected call of InsertToken.
func (mr *MockAuthStoreMockRecorder) InsertToken(ctx, state, userID, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToken", reflect.TypeOf((*MockAuthStore)(nil).InsertToken), ctx, state, userID, duration)
}

// InsertUser mocks base method.
func (m *MockAuthStore) InsertUser(ctx context.Context, sub, neame string) (*proto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, sub, neame)
	ret0, _ := ret[0].(*proto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockAuthStoreMockRecorder) InsertUser(ctx, sub, neame any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockAuthStore)(nil).InsertUser), ctx, sub, neame)
}

// RefreshToken mocks base method.
func (m *MockAuthStore) RefreshToken(ctx context.Context, state string, duration time.Duration) (*proto.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, state, duration)
	ret0, _ := ret[0].(*proto.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthStoreMockRecorder) RefreshToken(ctx, state, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthStore)(nil).RefreshToken), ctx, state, duration)
}

// UpdateUserConfig mocks base method.
func (m *MockAuthStore) UpdateUserConfig(ctx context.Context, sub string, config *proto.UserConfig) (*proto.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserConfig", ctx, sub, config)
	ret0, _ := ret[0].(*proto.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserConfig indicates an expected call of UpdateUserConfig.
func (mr *MockAuthStoreMockRecorder) UpdateUserConfig(ctx, sub, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserConfig", reflect.TypeOf((*MockAuthStore)(nil).UpdateUserConfig), ctx, sub, config)
}

// UpdateUsername mocks base method.
func (m *MockAuthStore) UpdateUsername(ctx context.Context, sub, newName string) (*proto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", ctx, sub, newName)
	ret0, _ := ret[0].(*proto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsername indicates an expected call of UpdateUsername.
func (mr *MockAuthStoreMockRecorder) UpdateUsername(ctx, sub, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockAuthStore)(nil).UpdateUsername), ctx, sub, newName)
}
