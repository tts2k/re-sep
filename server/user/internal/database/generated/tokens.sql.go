// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const cleanTokens = `-- name: CleanTokens :exec
DELETE FROM Tokens
WHERE expires < Datetime("now")
`

func (q *Queries) CleanTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanTokens)
	return err
}

const getTokenById = `-- name: GetTokenById :one
SELECT id, userid, expires FROM Tokens
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTokenById(ctx context.Context, id uuid.UUID) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenById, id)
	var i Token
	err := row.Scan(&i.ID, &i.Userid, &i.Expires)
	return i, err
}

const getUserByTokenId = `-- name: GetUserByTokenId :one
SELECT id, userid, expires FROM Tokens
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByTokenId(ctx context.Context, id uuid.UUID) (Token, error) {
	row := q.db.QueryRowContext(ctx, getUserByTokenId, id)
	var i Token
	err := row.Scan(&i.ID, &i.Userid, &i.Expires)
	return i, err
}

const insertToken = `-- name: InsertToken :one
INSERT INTO Tokens (
	id, userId, expires
) VALUES (
	?, ?, ?
)
RETURNING id, userid, expires
`

type InsertTokenParams struct {
	ID      uuid.UUID
	Userid  uuid.UUID
	Expires string
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, insertToken, arg.ID, arg.Userid, arg.Expires)
	var i Token
	err := row.Scan(&i.ID, &i.Userid, &i.Expires)
	return i, err
}

const updateToken = `-- name: UpdateToken :one
;

UPDATE Tokens
SET expires = ?
WHERE id = ?
RETURNING id, userid, expires
`

type UpdateTokenParams struct {
	Expires string
	ID      uuid.UUID
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, updateToken, arg.Expires, arg.ID)
	var i Token
	err := row.Scan(&i.ID, &i.Userid, &i.Expires)
	return i, err
}
