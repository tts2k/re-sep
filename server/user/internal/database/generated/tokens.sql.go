// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package database

import (
	"context"
)

const cleanTokens = `-- name: CleanTokens :exec
DELETE FROM Tokens
WHERE expires < Datetime("now")
`

func (q *Queries) CleanTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanTokens)
	return err
}

const getTokenByState = `-- name: GetTokenByState :one
SELECT state, userid, expires FROM Tokens
WHERE state = ? AND expires > Datetime("now")
LIMIT 1
`

func (q *Queries) GetTokenByState(ctx context.Context, state string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByState, state)
	var i Token
	err := row.Scan(&i.State, &i.Userid, &i.Expires)
	return i, err
}

const insertToken = `-- name: InsertToken :one
INSERT INTO Tokens (
	state, userId, expires
) VALUES (
	?, ?, ?
)
RETURNING state, userid, expires
`

type InsertTokenParams struct {
	State   string
	Userid  string
	Expires interface{}
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, insertToken, arg.State, arg.Userid, arg.Expires)
	var i Token
	err := row.Scan(&i.State, &i.Userid, &i.Expires)
	return i, err
}

const refreshToken = `-- name: RefreshToken :one
UPDATE Tokens
SET expires = ?
WHERE state = ?
RETURNING state, userid, expires
`

type RefreshTokenParams struct {
	Expires interface{}
	State   string
}

func (q *Queries) RefreshToken(ctx context.Context, arg RefreshTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, refreshToken, arg.Expires, arg.State)
	var i Token
	err := row.Scan(&i.State, &i.Userid, &i.Expires)
	return i, err
}
