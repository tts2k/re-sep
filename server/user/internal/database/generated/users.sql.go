// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM Users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, email, created, updated FROM Users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO Users (
	id, username, password, email, created, updated
) VALUES (
	?, ?, ?, ?, Datetime('now'), Datetime('now')
)
RETURNING id, username, password, email, created, updated
`

type InsertUserParams struct {
	ID       uuid.UUID
	Username string
	Password string
	Email    string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
;

UPDATE Users
SET password = ?
WHERE id = ?
RETURNING id, username, password, email, created, updated
`

type UpdateUserPasswordParams struct {
	Password string
	ID       uuid.UUID
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.Password, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
