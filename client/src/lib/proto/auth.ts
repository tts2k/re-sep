// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.27.2
// source: auth.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "auth";

export interface Empty {
}

export interface Username {
  name: string;
}

export interface User {
  sub: string;
  name: string;
}

export interface AuthResponse {
  token: string;
  user: User | undefined;
}

export interface Margin {
  left: number;
  right: number;
}

export interface UserConfig {
  font: string;
  fontSize: number;
  justify: boolean;
  margin: Margin | undefined;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty = {
  encode(_: Empty, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Empty {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseUsername(): Username {
  return { name: "" };
}

export const Username = {
  encode(message: Username, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Username {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsername();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Username {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: Username): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Username>, I>>(base?: I): Username {
    return Username.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Username>, I>>(object: I): Username {
    const message = createBaseUsername();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUser(): User {
  return { sub: "", name: "" };
}

export const User = {
  encode(message: User, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sub !== "") {
      writer.uint32(10).string(message.sub);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): User {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sub = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      sub: isSet(object.sub) ? globalThis.String(object.sub) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.sub !== "") {
      obj.sub = message.sub;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.sub = object.sub ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAuthResponse(): AuthResponse {
  return { token: "", user: undefined };
}

export const AuthResponse = {
  encode(message: AuthResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthResponse {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: AuthResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthResponse>, I>>(base?: I): AuthResponse {
    return AuthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthResponse>, I>>(object: I): AuthResponse {
    const message = createBaseAuthResponse();
    message.token = object.token ?? "";
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseMargin(): Margin {
  return { left: 0, right: 0 };
}

export const Margin = {
  encode(message: Margin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.left !== 0) {
      writer.uint32(8).int32(message.left);
    }
    if (message.right !== 0) {
      writer.uint32(16).int32(message.right);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Margin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMargin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.left = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.right = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Margin {
    return {
      left: isSet(object.left) ? globalThis.Number(object.left) : 0,
      right: isSet(object.right) ? globalThis.Number(object.right) : 0,
    };
  },

  toJSON(message: Margin): unknown {
    const obj: any = {};
    if (message.left !== 0) {
      obj.left = Math.round(message.left);
    }
    if (message.right !== 0) {
      obj.right = Math.round(message.right);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Margin>, I>>(base?: I): Margin {
    return Margin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Margin>, I>>(object: I): Margin {
    const message = createBaseMargin();
    message.left = object.left ?? 0;
    message.right = object.right ?? 0;
    return message;
  },
};

function createBaseUserConfig(): UserConfig {
  return { font: "", fontSize: 0, justify: false, margin: undefined };
}

export const UserConfig = {
  encode(message: UserConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.font !== "") {
      writer.uint32(10).string(message.font);
    }
    if (message.fontSize !== 0) {
      writer.uint32(16).int32(message.fontSize);
    }
    if (message.justify !== false) {
      writer.uint32(24).bool(message.justify);
    }
    if (message.margin !== undefined) {
      Margin.encode(message.margin, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.font = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fontSize = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.justify = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.margin = Margin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserConfig {
    return {
      font: isSet(object.font) ? globalThis.String(object.font) : "",
      fontSize: isSet(object.fontSize) ? globalThis.Number(object.fontSize) : 0,
      justify: isSet(object.justify) ? globalThis.Boolean(object.justify) : false,
      margin: isSet(object.margin) ? Margin.fromJSON(object.margin) : undefined,
    };
  },

  toJSON(message: UserConfig): unknown {
    const obj: any = {};
    if (message.font !== "") {
      obj.font = message.font;
    }
    if (message.fontSize !== 0) {
      obj.fontSize = Math.round(message.fontSize);
    }
    if (message.justify !== false) {
      obj.justify = message.justify;
    }
    if (message.margin !== undefined) {
      obj.margin = Margin.toJSON(message.margin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserConfig>, I>>(base?: I): UserConfig {
    return UserConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserConfig>, I>>(object: I): UserConfig {
    const message = createBaseUserConfig();
    message.font = object.font ?? "";
    message.fontSize = object.fontSize ?? 0;
    message.justify = object.justify ?? false;
    message.margin = (object.margin !== undefined && object.margin !== null)
      ? Margin.fromPartial(object.margin)
      : undefined;
    return message;
  },
};

export type AuthService = typeof AuthService;
export const AuthService = {
  auth: {
    path: "/auth.Auth/Auth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: AuthResponse) => Buffer.from(AuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthResponse.decode(value),
  },
  updateUsername: {
    path: "/auth.Auth/UpdateUsername",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Username) => Buffer.from(Username.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Username.decode(value),
    responseSerialize: (value: User) => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer) => User.decode(value),
  },
  updateUserConfig: {
    path: "/auth.Auth/UpdateUserConfig",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserConfig) => Buffer.from(UserConfig.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserConfig.decode(value),
    responseSerialize: (value: UserConfig) => Buffer.from(UserConfig.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserConfig.decode(value),
  },
  getUserConfig: {
    path: "/auth.Auth/GetUserConfig",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: UserConfig) => Buffer.from(UserConfig.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserConfig.decode(value),
  },
} as const;

export interface AuthServer extends UntypedServiceImplementation {
  auth: handleUnaryCall<Empty, AuthResponse>;
  updateUsername: handleUnaryCall<Username, User>;
  updateUserConfig: handleUnaryCall<UserConfig, UserConfig>;
  getUserConfig: handleUnaryCall<Empty, UserConfig>;
}

export interface AuthClient extends Client {
  auth(request: Empty, callback: (error: ServiceError | null, response: AuthResponse) => void): ClientUnaryCall;
  auth(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthResponse) => void,
  ): ClientUnaryCall;
  auth(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthResponse) => void,
  ): ClientUnaryCall;
  updateUsername(request: Username, callback: (error: ServiceError | null, response: User) => void): ClientUnaryCall;
  updateUsername(
    request: Username,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  updateUsername(
    request: Username,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  updateUserConfig(
    request: UserConfig,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
  updateUserConfig(
    request: UserConfig,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
  updateUserConfig(
    request: UserConfig,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
  getUserConfig(request: Empty, callback: (error: ServiceError | null, response: UserConfig) => void): ClientUnaryCall;
  getUserConfig(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
  getUserConfig(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
}

export const AuthClient = makeGenericClientConstructor(AuthService, "auth.Auth") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthClient;
  service: typeof AuthService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
