// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.27.2
// source: user_config.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "config";

export interface Margin {
  left: number;
  right: number;
}

export interface UserConfig {
  font: string;
  fontSize: number;
  justify: boolean;
  margin: Margin | undefined;
}

function createBaseMargin(): Margin {
  return { left: 0, right: 0 };
}

export const Margin = {
  encode(message: Margin, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.left !== 0) {
      writer.uint32(8).int32(message.left);
    }
    if (message.right !== 0) {
      writer.uint32(16).int32(message.right);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Margin {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMargin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.left = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.right = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Margin {
    return {
      left: isSet(object.left) ? globalThis.Number(object.left) : 0,
      right: isSet(object.right) ? globalThis.Number(object.right) : 0,
    };
  },

  toJSON(message: Margin): unknown {
    const obj: any = {};
    if (message.left !== 0) {
      obj.left = Math.round(message.left);
    }
    if (message.right !== 0) {
      obj.right = Math.round(message.right);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Margin>, I>>(base?: I): Margin {
    return Margin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Margin>, I>>(object: I): Margin {
    const message = createBaseMargin();
    message.left = object.left ?? 0;
    message.right = object.right ?? 0;
    return message;
  },
};

function createBaseUserConfig(): UserConfig {
  return { font: "", fontSize: 0, justify: false, margin: undefined };
}

export const UserConfig = {
  encode(message: UserConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.font !== "") {
      writer.uint32(10).string(message.font);
    }
    if (message.fontSize !== 0) {
      writer.uint32(16).int32(message.fontSize);
    }
    if (message.justify !== false) {
      writer.uint32(24).bool(message.justify);
    }
    if (message.margin !== undefined) {
      Margin.encode(message.margin, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.font = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fontSize = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.justify = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.margin = Margin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserConfig {
    return {
      font: isSet(object.font) ? globalThis.String(object.font) : "",
      fontSize: isSet(object.fontSize) ? globalThis.Number(object.fontSize) : 0,
      justify: isSet(object.justify) ? globalThis.Boolean(object.justify) : false,
      margin: isSet(object.margin) ? Margin.fromJSON(object.margin) : undefined,
    };
  },

  toJSON(message: UserConfig): unknown {
    const obj: any = {};
    if (message.font !== "") {
      obj.font = message.font;
    }
    if (message.fontSize !== 0) {
      obj.fontSize = Math.round(message.fontSize);
    }
    if (message.justify !== false) {
      obj.justify = message.justify;
    }
    if (message.margin !== undefined) {
      obj.margin = Margin.toJSON(message.margin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserConfig>, I>>(base?: I): UserConfig {
    return UserConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserConfig>, I>>(object: I): UserConfig {
    const message = createBaseUserConfig();
    message.font = object.font ?? "";
    message.fontSize = object.fontSize ?? 0;
    message.justify = object.justify ?? false;
    message.margin = (object.margin !== undefined && object.margin !== null)
      ? Margin.fromPartial(object.margin)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
