// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.27.2
// source: main.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { AuthResponse, Empty, User, Username } from "./auth";
import { Article, EntryName } from "./content";
import { UserConfig } from "./user_config";

export const protobufPackage = "main";

export type AuthService = typeof AuthService;
export const AuthService = {
  auth: {
    path: "/main.Auth/Auth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: AuthResponse) => Buffer.from(AuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthResponse.decode(value),
  },
  updateUsername: {
    path: "/main.Auth/UpdateUsername",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Username) => Buffer.from(Username.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Username.decode(value),
    responseSerialize: (value: User) => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer) => User.decode(value),
  },
  updateUserConfig: {
    path: "/main.Auth/UpdateUserConfig",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserConfig) => Buffer.from(UserConfig.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserConfig.decode(value),
    responseSerialize: (value: UserConfig) => Buffer.from(UserConfig.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserConfig.decode(value),
  },
  getUserConfig: {
    path: "/main.Auth/GetUserConfig",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: UserConfig) => Buffer.from(UserConfig.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserConfig.decode(value),
  },
} as const;

export interface AuthServer extends UntypedServiceImplementation {
  auth: handleUnaryCall<Empty, AuthResponse>;
  updateUsername: handleUnaryCall<Username, User>;
  updateUserConfig: handleUnaryCall<UserConfig, UserConfig>;
  getUserConfig: handleUnaryCall<Empty, UserConfig>;
}

export interface AuthClient extends Client {
  auth(request: Empty, callback: (error: ServiceError | null, response: AuthResponse) => void): ClientUnaryCall;
  auth(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthResponse) => void,
  ): ClientUnaryCall;
  auth(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthResponse) => void,
  ): ClientUnaryCall;
  updateUsername(request: Username, callback: (error: ServiceError | null, response: User) => void): ClientUnaryCall;
  updateUsername(
    request: Username,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  updateUsername(
    request: Username,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  updateUserConfig(
    request: UserConfig,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
  updateUserConfig(
    request: UserConfig,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
  updateUserConfig(
    request: UserConfig,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
  getUserConfig(request: Empty, callback: (error: ServiceError | null, response: UserConfig) => void): ClientUnaryCall;
  getUserConfig(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
  getUserConfig(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserConfig) => void,
  ): ClientUnaryCall;
}

export const AuthClient = makeGenericClientConstructor(AuthService, "main.Auth") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthClient;
  service: typeof AuthService;
  serviceName: string;
};

export type ContentService = typeof ContentService;
export const ContentService = {
  getArticle: {
    path: "/main.Content/GetArticle",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EntryName) => Buffer.from(EntryName.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EntryName.decode(value),
    responseSerialize: (value: Article) => Buffer.from(Article.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Article.decode(value),
  },
} as const;

export interface ContentServer extends UntypedServiceImplementation {
  getArticle: handleUnaryCall<EntryName, Article>;
}

export interface ContentClient extends Client {
  getArticle(request: EntryName, callback: (error: ServiceError | null, response: Article) => void): ClientUnaryCall;
  getArticle(
    request: EntryName,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Article) => void,
  ): ClientUnaryCall;
  getArticle(
    request: EntryName,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Article) => void,
  ): ClientUnaryCall;
}

export const ContentClient = makeGenericClientConstructor(ContentService, "main.Content") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ContentClient;
  service: typeof ContentService;
  serviceName: string;
};
